
W.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000530  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006b8  080006c0  000106c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080006b8  080006b8  000106b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080006bc  080006bc  000106bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000106c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000000  080006c0  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000020  080006c0  00020020  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  000106c0  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000174f  00000000  00000000  000106e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000060c  00000000  00000000  00011e37  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000571  00000000  00000000  00012443  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000000c8  00000000  00000000  000129b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000d0  00000000  00000000  00012a80  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000078e  00000000  00000000  00012b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000097b  00000000  00000000  000132de  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00013c59  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000150  00000000  00000000  00013cd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c06      	ldr	r4, [pc, #24]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	2b00      	cmp	r3, #0
 8000190:	d107      	bne.n	80001a2 <__do_global_dtors_aux+0x1a>
 8000192:	4b05      	ldr	r3, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000194:	2b00      	cmp	r3, #0
 8000196:	d002      	beq.n	800019e <__do_global_dtors_aux+0x16>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x24>)
 800019a:	e000      	b.n	800019e <__do_global_dtors_aux+0x16>
 800019c:	bf00      	nop
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000000 	.word	0x20000000
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080006a0 	.word	0x080006a0

080001b0 <frame_dummy>:
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <frame_dummy+0x14>)
 80001b2:	b510      	push	{r4, lr}
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d003      	beq.n	80001c0 <frame_dummy+0x10>
 80001b8:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	4804      	ldr	r0, [pc, #16]	; (80001cc <frame_dummy+0x1c>)
 80001bc:	e000      	b.n	80001c0 <frame_dummy+0x10>
 80001be:	bf00      	nop
 80001c0:	bd10      	pop	{r4, pc}
 80001c2:	46c0      	nop			; (mov r8, r8)
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000004 	.word	0x20000004
 80001cc:	080006a0 	.word	0x080006a0

080001d0 <__gnu_thumb1_case_uqi>:
 80001d0:	b402      	push	{r1}
 80001d2:	4671      	mov	r1, lr
 80001d4:	0849      	lsrs	r1, r1, #1
 80001d6:	0049      	lsls	r1, r1, #1
 80001d8:	5c09      	ldrb	r1, [r1, r0]
 80001da:	0049      	lsls	r1, r1, #1
 80001dc:	448e      	add	lr, r1
 80001de:	bc02      	pop	{r1}
 80001e0:	4770      	bx	lr
 80001e2:	46c0      	nop			; (mov r8, r8)

080001e4 <__udivsi3>:
 80001e4:	2200      	movs	r2, #0
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d374      	bcc.n	80002d6 <__udivsi3+0xf2>
 80001ec:	0903      	lsrs	r3, r0, #4
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d35f      	bcc.n	80002b2 <__udivsi3+0xce>
 80001f2:	0a03      	lsrs	r3, r0, #8
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d344      	bcc.n	8000282 <__udivsi3+0x9e>
 80001f8:	0b03      	lsrs	r3, r0, #12
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d328      	bcc.n	8000250 <__udivsi3+0x6c>
 80001fe:	0c03      	lsrs	r3, r0, #16
 8000200:	428b      	cmp	r3, r1
 8000202:	d30d      	bcc.n	8000220 <__udivsi3+0x3c>
 8000204:	22ff      	movs	r2, #255	; 0xff
 8000206:	0209      	lsls	r1, r1, #8
 8000208:	ba12      	rev	r2, r2
 800020a:	0c03      	lsrs	r3, r0, #16
 800020c:	428b      	cmp	r3, r1
 800020e:	d302      	bcc.n	8000216 <__udivsi3+0x32>
 8000210:	1212      	asrs	r2, r2, #8
 8000212:	0209      	lsls	r1, r1, #8
 8000214:	d065      	beq.n	80002e2 <__udivsi3+0xfe>
 8000216:	0b03      	lsrs	r3, r0, #12
 8000218:	428b      	cmp	r3, r1
 800021a:	d319      	bcc.n	8000250 <__udivsi3+0x6c>
 800021c:	e000      	b.n	8000220 <__udivsi3+0x3c>
 800021e:	0a09      	lsrs	r1, r1, #8
 8000220:	0bc3      	lsrs	r3, r0, #15
 8000222:	428b      	cmp	r3, r1
 8000224:	d301      	bcc.n	800022a <__udivsi3+0x46>
 8000226:	03cb      	lsls	r3, r1, #15
 8000228:	1ac0      	subs	r0, r0, r3
 800022a:	4152      	adcs	r2, r2
 800022c:	0b83      	lsrs	r3, r0, #14
 800022e:	428b      	cmp	r3, r1
 8000230:	d301      	bcc.n	8000236 <__udivsi3+0x52>
 8000232:	038b      	lsls	r3, r1, #14
 8000234:	1ac0      	subs	r0, r0, r3
 8000236:	4152      	adcs	r2, r2
 8000238:	0b43      	lsrs	r3, r0, #13
 800023a:	428b      	cmp	r3, r1
 800023c:	d301      	bcc.n	8000242 <__udivsi3+0x5e>
 800023e:	034b      	lsls	r3, r1, #13
 8000240:	1ac0      	subs	r0, r0, r3
 8000242:	4152      	adcs	r2, r2
 8000244:	0b03      	lsrs	r3, r0, #12
 8000246:	428b      	cmp	r3, r1
 8000248:	d301      	bcc.n	800024e <__udivsi3+0x6a>
 800024a:	030b      	lsls	r3, r1, #12
 800024c:	1ac0      	subs	r0, r0, r3
 800024e:	4152      	adcs	r2, r2
 8000250:	0ac3      	lsrs	r3, r0, #11
 8000252:	428b      	cmp	r3, r1
 8000254:	d301      	bcc.n	800025a <__udivsi3+0x76>
 8000256:	02cb      	lsls	r3, r1, #11
 8000258:	1ac0      	subs	r0, r0, r3
 800025a:	4152      	adcs	r2, r2
 800025c:	0a83      	lsrs	r3, r0, #10
 800025e:	428b      	cmp	r3, r1
 8000260:	d301      	bcc.n	8000266 <__udivsi3+0x82>
 8000262:	028b      	lsls	r3, r1, #10
 8000264:	1ac0      	subs	r0, r0, r3
 8000266:	4152      	adcs	r2, r2
 8000268:	0a43      	lsrs	r3, r0, #9
 800026a:	428b      	cmp	r3, r1
 800026c:	d301      	bcc.n	8000272 <__udivsi3+0x8e>
 800026e:	024b      	lsls	r3, r1, #9
 8000270:	1ac0      	subs	r0, r0, r3
 8000272:	4152      	adcs	r2, r2
 8000274:	0a03      	lsrs	r3, r0, #8
 8000276:	428b      	cmp	r3, r1
 8000278:	d301      	bcc.n	800027e <__udivsi3+0x9a>
 800027a:	020b      	lsls	r3, r1, #8
 800027c:	1ac0      	subs	r0, r0, r3
 800027e:	4152      	adcs	r2, r2
 8000280:	d2cd      	bcs.n	800021e <__udivsi3+0x3a>
 8000282:	09c3      	lsrs	r3, r0, #7
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__udivsi3+0xa8>
 8000288:	01cb      	lsls	r3, r1, #7
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0983      	lsrs	r3, r0, #6
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__udivsi3+0xb4>
 8000294:	018b      	lsls	r3, r1, #6
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0943      	lsrs	r3, r0, #5
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__udivsi3+0xc0>
 80002a0:	014b      	lsls	r3, r1, #5
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0903      	lsrs	r3, r0, #4
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__udivsi3+0xcc>
 80002ac:	010b      	lsls	r3, r1, #4
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	08c3      	lsrs	r3, r0, #3
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__udivsi3+0xd8>
 80002b8:	00cb      	lsls	r3, r1, #3
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0883      	lsrs	r3, r0, #2
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__udivsi3+0xe4>
 80002c4:	008b      	lsls	r3, r1, #2
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0843      	lsrs	r3, r0, #1
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__udivsi3+0xf0>
 80002d0:	004b      	lsls	r3, r1, #1
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	1a41      	subs	r1, r0, r1
 80002d8:	d200      	bcs.n	80002dc <__udivsi3+0xf8>
 80002da:	4601      	mov	r1, r0
 80002dc:	4152      	adcs	r2, r2
 80002de:	4610      	mov	r0, r2
 80002e0:	4770      	bx	lr
 80002e2:	e7ff      	b.n	80002e4 <__udivsi3+0x100>
 80002e4:	b501      	push	{r0, lr}
 80002e6:	2000      	movs	r0, #0
 80002e8:	f000 f806 	bl	80002f8 <__aeabi_idiv0>
 80002ec:	bd02      	pop	{r1, pc}
 80002ee:	46c0      	nop			; (mov r8, r8)

080002f0 <__aeabi_uidivmod>:
 80002f0:	2900      	cmp	r1, #0
 80002f2:	d0f7      	beq.n	80002e4 <__udivsi3+0x100>
 80002f4:	e776      	b.n	80001e4 <__udivsi3>
 80002f6:	4770      	bx	lr

080002f8 <__aeabi_idiv0>:
 80002f8:	4770      	bx	lr
 80002fa:	46c0      	nop			; (mov r8, r8)

080002fc <SysTick_Handler>:

volatile uint32_t timeout = 0;

void SysTick_Handler(void)
{
    if (timeout)
 80002fc:	4b03      	ldr	r3, [pc, #12]	; (800030c <SysTick_Handler+0x10>)
 80002fe:	681a      	ldr	r2, [r3, #0]
 8000300:	2a00      	cmp	r2, #0
 8000302:	d002      	beq.n	800030a <SysTick_Handler+0xe>
        timeout--;
 8000304:	681a      	ldr	r2, [r3, #0]
 8000306:	3a01      	subs	r2, #1
 8000308:	601a      	str	r2, [r3, #0]
}
 800030a:	4770      	bx	lr
 800030c:	2000001c 	.word	0x2000001c

08000310 <receive_cmd>:

int receive_cmd(uint8_t *buf, uint16_t count)
{
    int i;

    I2C1->CR1 = 0;
 8000310:	2200      	movs	r2, #0
 8000312:	4b1f      	ldr	r3, [pc, #124]	; (8000390 <receive_cmd+0x80>)
{
 8000314:	b570      	push	{r4, r5, r6, lr}
    I2C1->CR1 = 0;
 8000316:	601a      	str	r2, [r3, #0]
    while (I2C1->CR1 & I2C_CR1_PE);
 8000318:	3201      	adds	r2, #1
 800031a:	681c      	ldr	r4, [r3, #0]
 800031c:	4214      	tst	r4, r2
 800031e:	d1fc      	bne.n	800031a <receive_cmd+0xa>

    I2C1->CR1 = I2C_CR1_PE;
 8000320:	601a      	str	r2, [r3, #0]
    while ((I2C1->CR1 & I2C_CR1_PE) == 0);
 8000322:	2201      	movs	r2, #1
 8000324:	681c      	ldr	r4, [r3, #0]
 8000326:	4214      	tst	r4, r2
 8000328:	d0fc      	beq.n	8000324 <receive_cmd+0x14>

    I2C1->ICR = 0xffffffff;
 800032a:	2201      	movs	r2, #1
 800032c:	4252      	negs	r2, r2
 800032e:	61da      	str	r2, [r3, #28]

    while ((I2C1->ISR & I2C_ISR_ADDR) == 0);
 8000330:	3209      	adds	r2, #9
 8000332:	699c      	ldr	r4, [r3, #24]
 8000334:	4214      	tst	r4, r2
 8000336:	d0fc      	beq.n	8000332 <receive_cmd+0x22>
    I2C1->ICR = I2C_ICR_ADDRCF;
 8000338:	61da      	str	r2, [r3, #28]

    if (I2C1->ISR & I2C_ISR_DIR) {
 800033a:	699a      	ldr	r2, [r3, #24]
 800033c:	03d2      	lsls	r2, r2, #15
 800033e:	d421      	bmi.n	8000384 <receive_cmd+0x74>
        // read - not supported
        return -1;
    }

    timeout = 4;
 8000340:	2504      	movs	r5, #4
 8000342:	0004      	movs	r4, r0
 8000344:	4a13      	ldr	r2, [pc, #76]	; (8000394 <receive_cmd+0x84>)
 8000346:	6015      	str	r5, [r2, #0]
    for (i = 0; i < count; i++) {
 8000348:	1a26      	subs	r6, r4, r0
 800034a:	428e      	cmp	r6, r1
 800034c:	db0d      	blt.n	800036a <receive_cmd+0x5a>
        if (!timeout)
            return -2;
        *buf++ = I2C1->RXDR;
    }

    while (((I2C1->ISR & I2C_ISR_STOPF) == 0) && (timeout));
 800034e:	2020      	movs	r0, #32
 8000350:	6999      	ldr	r1, [r3, #24]
 8000352:	4201      	tst	r1, r0
 8000354:	d102      	bne.n	800035c <receive_cmd+0x4c>
 8000356:	6811      	ldr	r1, [r2, #0]
 8000358:	2900      	cmp	r1, #0
 800035a:	d1f9      	bne.n	8000350 <receive_cmd+0x40>
    if (!timeout)
 800035c:	6812      	ldr	r2, [r2, #0]
 800035e:	2a00      	cmp	r2, #0
 8000360:	d013      	beq.n	800038a <receive_cmd+0x7a>
        return -2;

    I2C1->ICR = I2C_ICR_STOPCF;
 8000362:	2220      	movs	r2, #32
    return 0;
 8000364:	2000      	movs	r0, #0
    I2C1->ICR = I2C_ICR_STOPCF;
 8000366:	61da      	str	r2, [r3, #28]
}
 8000368:	bd70      	pop	{r4, r5, r6, pc}
        while (((I2C1->ISR & I2C_ISR_RXNE) == 0) && (timeout));
 800036a:	699e      	ldr	r6, [r3, #24]
 800036c:	422e      	tst	r6, r5
 800036e:	d102      	bne.n	8000376 <receive_cmd+0x66>
 8000370:	6816      	ldr	r6, [r2, #0]
 8000372:	2e00      	cmp	r6, #0
 8000374:	d1f9      	bne.n	800036a <receive_cmd+0x5a>
        if (!timeout)
 8000376:	6816      	ldr	r6, [r2, #0]
 8000378:	2e00      	cmp	r6, #0
 800037a:	d006      	beq.n	800038a <receive_cmd+0x7a>
        *buf++ = I2C1->RXDR;
 800037c:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 800037e:	7026      	strb	r6, [r4, #0]
 8000380:	3401      	adds	r4, #1
 8000382:	e7e1      	b.n	8000348 <receive_cmd+0x38>
        return -1;
 8000384:	2001      	movs	r0, #1
            return -2;
 8000386:	4240      	negs	r0, r0
 8000388:	e7ee      	b.n	8000368 <receive_cmd+0x58>
 800038a:	2002      	movs	r0, #2
 800038c:	e7fb      	b.n	8000386 <receive_cmd+0x76>
 800038e:	46c0      	nop			; (mov r8, r8)
 8000390:	40005400 	.word	0x40005400
 8000394:	2000001c 	.word	0x2000001c

08000398 <main>:

int main()
{
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000398:	2380      	movs	r3, #128	; 0x80
{
 800039a:	b507      	push	{r0, r1, r2, lr}
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 800039c:	4a2e      	ldr	r2, [pc, #184]	; (8000458 <main+0xc0>)
 800039e:	029b      	lsls	r3, r3, #10
 80003a0:	6951      	ldr	r1, [r2, #20]
 80003a2:	430b      	orrs	r3, r1
 80003a4:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN | RCC_APB1ENR_TIM3EN;
 80003a6:	69d1      	ldr	r1, [r2, #28]
 80003a8:	4b2c      	ldr	r3, [pc, #176]	; (800045c <main+0xc4>)
 80003aa:	430b      	orrs	r3, r1
 80003ac:	61d3      	str	r3, [r2, #28]

    GPIOA->MODER |= MODER(MODE_OUT, PIN_AIN1) | MODER(MODE_OUT, PIN_AIN2) |
 80003ae:	2390      	movs	r3, #144	; 0x90
 80003b0:	05db      	lsls	r3, r3, #23
 80003b2:	6818      	ldr	r0, [r3, #0]
 80003b4:	492a      	ldr	r1, [pc, #168]	; (8000460 <main+0xc8>)
 80003b6:	4301      	orrs	r1, r0
 80003b8:	6019      	str	r1, [r3, #0]
        MODER(MODE_OUT, PIN_BIN1) | MODER(MODE_OUT, PIN_BIN2) |
        MODER(MODE_AF, PIN_SCL) | MODER(MODE_AF, PIN_SDA) |
        MODER(MODE_AF, PIN_PWMA) | MODER(MODE_AF, PIN_PWMB) |
        MODER(MODE_OUT, PIN_STBY);

    GPIOA->AFR[0] |= (1 << GPIO_AFRH_AFRH6_Pos) | (1 << GPIO_AFRH_AFRH7_Pos);
 80003ba:	2188      	movs	r1, #136	; 0x88
 80003bc:	6a18      	ldr	r0, [r3, #32]
 80003be:	0549      	lsls	r1, r1, #21
 80003c0:	4301      	orrs	r1, r0
 80003c2:	6219      	str	r1, [r3, #32]
    GPIOA->AFR[1] |= (4 << GPIO_AFRH_AFRH1_Pos) | (4 << GPIO_AFRH_AFRH2_Pos);
 80003c4:	2188      	movs	r1, #136	; 0x88
 80003c6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80003c8:	00c9      	lsls	r1, r1, #3
 80003ca:	4301      	orrs	r1, r0
 80003cc:	6259      	str	r1, [r3, #36]	; 0x24

    GPIOA->OTYPER |= GPIO_OTYPER_OT_9 | GPIO_OTYPER_OT_10;
 80003ce:	21c0      	movs	r1, #192	; 0xc0
 80003d0:	6858      	ldr	r0, [r3, #4]
 80003d2:	00c9      	lsls	r1, r1, #3
 80003d4:	4301      	orrs	r1, r0
 80003d6:	6059      	str	r1, [r3, #4]
    GPIOA->PUPDR |= GPIO_PUPDR_PUPDR9_0 | GPIO_PUPDR_PUPDR10_0;
 80003d8:	21a0      	movs	r1, #160	; 0xa0
 80003da:	68d8      	ldr	r0, [r3, #12]
 80003dc:	0349      	lsls	r1, r1, #13
 80003de:	4301      	orrs	r1, r0
 80003e0:	60d9      	str	r1, [r3, #12]

    RCC->AHBENR |= RCC_AHBENR_GPIOFEN;
 80003e2:	2380      	movs	r3, #128	; 0x80
 80003e4:	6951      	ldr	r1, [r2, #20]
 80003e6:	03db      	lsls	r3, r3, #15
 80003e8:	430b      	orrs	r3, r1
 80003ea:	6153      	str	r3, [r2, #20]
    GPIOF->MODER  |= MODER(MODE_IN, 0) | MODER(MODE_IN, 1);
 80003ec:	4b1d      	ldr	r3, [pc, #116]	; (8000464 <main+0xcc>)
    GPIOF->PUPDR  |= GPIO_PUPDR_PUPDR0_0 | GPIO_PUPDR_PUPDR1_0;
    I2C1->OAR1 = I2C_OAR1_OA1EN | ((I2C_BASE_ADDR + (GPIOF->IDR & 3)) << 1);
 80003ee:	481e      	ldr	r0, [pc, #120]	; (8000468 <main+0xd0>)
    GPIOF->MODER  |= MODER(MODE_IN, 0) | MODER(MODE_IN, 1);
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	601a      	str	r2, [r3, #0]
    GPIOF->PUPDR  |= GPIO_PUPDR_PUPDR0_0 | GPIO_PUPDR_PUPDR1_0;
 80003f4:	2205      	movs	r2, #5
 80003f6:	68d9      	ldr	r1, [r3, #12]
 80003f8:	430a      	orrs	r2, r1
 80003fa:	60da      	str	r2, [r3, #12]
    I2C1->OAR1 = I2C_OAR1_OA1EN | ((I2C_BASE_ADDR + (GPIOF->IDR & 3)) << 1);
 80003fc:	2203      	movs	r2, #3
 80003fe:	2180      	movs	r1, #128	; 0x80
 8000400:	691b      	ldr	r3, [r3, #16]
 8000402:	0209      	lsls	r1, r1, #8
 8000404:	4013      	ands	r3, r2
 8000406:	332c      	adds	r3, #44	; 0x2c
 8000408:	005b      	lsls	r3, r3, #1
 800040a:	430b      	orrs	r3, r1
    
    I2C1->CR1 = I2C_CR1_PE;
 800040c:	3a02      	subs	r2, #2
    I2C1->OAR1 = I2C_OAR1_OA1EN | ((I2C_BASE_ADDR + (GPIOF->IDR & 3)) << 1);
 800040e:	6083      	str	r3, [r0, #8]
    I2C1->CR1 = I2C_CR1_PE;
 8000410:	6002      	str	r2, [r0, #0]

    TIM3->CCMR1 = TIM_CCMR1_OC1PE | TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1 |
 8000412:	4b16      	ldr	r3, [pc, #88]	; (800046c <main+0xd4>)
 8000414:	4816      	ldr	r0, [pc, #88]	; (8000470 <main+0xd8>)
 8000416:	6198      	str	r0, [r3, #24]
        TIM_CCMR1_OC2PE | TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1;
    TIM3->CCER = TIM_CCER_CC1E | TIM_CCER_CC2E;
 8000418:	2011      	movs	r0, #17
 800041a:	6218      	str	r0, [r3, #32]
    TIM3->BDTR = TIM_BDTR_MOE;
 800041c:	6459      	str	r1, [r3, #68]	; 0x44
    TIM3->ARR = 8000 - 1;
 800041e:	4915      	ldr	r1, [pc, #84]	; (8000474 <main+0xdc>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000420:	4815      	ldr	r0, [pc, #84]	; (8000478 <main+0xe0>)
 8000422:	62d9      	str	r1, [r3, #44]	; 0x2c
    TIM3->EGR = TIM_EGR_UG;
 8000424:	615a      	str	r2, [r3, #20]
    TIM3->CR1 = TIM_CR1_ARPE | TIM_CR1_CEN;
 8000426:	3280      	adds	r2, #128	; 0x80
 8000428:	601a      	str	r2, [r3, #0]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800042a:	4a14      	ldr	r2, [pc, #80]	; (800047c <main+0xe4>)
 800042c:	6051      	str	r1, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800042e:	21c0      	movs	r1, #192	; 0xc0
 8000430:	6a03      	ldr	r3, [r0, #32]
 8000432:	0609      	lsls	r1, r1, #24
 8000434:	021b      	lsls	r3, r3, #8
 8000436:	0a1b      	lsrs	r3, r3, #8
 8000438:	430b      	orrs	r3, r1
 800043a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800043c:	2300      	movs	r3, #0
 800043e:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000440:	3307      	adds	r3, #7
 8000442:	6013      	str	r3, [r2, #0]
    SysTick_Config(8000);

    while (1)
    {
        uint8_t cmd[4];
        int rc = receive_cmd(cmd, sizeof(cmd));
 8000444:	2104      	movs	r1, #4
 8000446:	a801      	add	r0, sp, #4
 8000448:	f7ff ff62 	bl	8000310 <receive_cmd>
        if (rc == 0)
 800044c:	2800      	cmp	r0, #0
 800044e:	d1f9      	bne.n	8000444 <main+0xac>
            user_i2c_proc(cmd);
 8000450:	a801      	add	r0, sp, #4
 8000452:	f000 f8e1 	bl	8000618 <user_i2c_proc>
    {
 8000456:	e7f5      	b.n	8000444 <main+0xac>
 8000458:	40021000 	.word	0x40021000
 800045c:	00200002 	.word	0x00200002
 8000460:	00289855 	.word	0x00289855
 8000464:	48001400 	.word	0x48001400
 8000468:	40005400 	.word	0x40005400
 800046c:	40000400 	.word	0x40000400
 8000470:	00006868 	.word	0x00006868
 8000474:	00001f3f 	.word	0x00001f3f
 8000478:	e000ed00 	.word	0xe000ed00
 800047c:	e000e010 	.word	0xe000e010

08000480 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000480:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000482:	e003      	b.n	800048c <LoopCopyDataInit>

08000484 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000484:	4b0b      	ldr	r3, [pc, #44]	; (80004b4 <LoopForever+0x2>)
	ldr	r3, [r3, r1]
 8000486:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000488:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800048a:	3104      	adds	r1, #4

0800048c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800048c:	480a      	ldr	r0, [pc, #40]	; (80004b8 <LoopForever+0x6>)
	ldr	r3, =_edata
 800048e:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <LoopForever+0xa>)
	adds	r2, r0, r1
 8000490:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000492:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000494:	d3f6      	bcc.n	8000484 <CopyDataInit>
	ldr	r2, =_sbss
 8000496:	4a0a      	ldr	r2, [pc, #40]	; (80004c0 <LoopForever+0xe>)
	b	LoopFillZerobss
 8000498:	e002      	b.n	80004a0 <LoopFillZerobss>

0800049a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs r3, #0
 800049a:	2300      	movs	r3, #0
 	str  r3, [r2]
 800049c:	6013      	str	r3, [r2, #0]
	adds r2, r2, #4
 800049e:	3204      	adds	r2, #4

080004a0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80004a0:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <LoopForever+0x12>)
	cmp	r2, r3
 80004a2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80004a4:	d3f9      	bcc.n	800049a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004a6:	f000 f811 	bl	80004cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004aa:	f000 f8d5 	bl	8000658 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80004ae:	f7ff ff73 	bl	8000398 <main>

080004b2 <LoopForever>:

LoopForever:
    b LoopForever
 80004b2:	e7fe      	b.n	80004b2 <LoopForever>
	ldr	r3, =_sidata
 80004b4:	080006c0 	.word	0x080006c0
	ldr	r0, =_sdata
 80004b8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80004bc:	20000000 	.word	0x20000000
	ldr	r2, =_sbss
 80004c0:	20000000 	.word	0x20000000
	ldr	r3, = _ebss
 80004c4:	20000020 	.word	0x20000020

080004c8 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80004c8:	e7fe      	b.n	80004c8 <BusFault_Handler>
	...

080004cc <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 80004cc:	2101      	movs	r1, #1
 80004ce:	4b11      	ldr	r3, [pc, #68]	; (8000514 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80004d0:	4811      	ldr	r0, [pc, #68]	; (8000518 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 80004d2:	681a      	ldr	r2, [r3, #0]
 80004d4:	430a      	orrs	r2, r1
 80004d6:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80004d8:	685a      	ldr	r2, [r3, #4]
 80004da:	4002      	ands	r2, r0
 80004dc:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80004de:	681a      	ldr	r2, [r3, #0]
 80004e0:	480e      	ldr	r0, [pc, #56]	; (800051c <SystemInit+0x50>)
 80004e2:	4002      	ands	r2, r0
 80004e4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	480d      	ldr	r0, [pc, #52]	; (8000520 <SystemInit+0x54>)
 80004ea:	4002      	ands	r2, r0
 80004ec:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80004ee:	685a      	ldr	r2, [r3, #4]
 80004f0:	480c      	ldr	r0, [pc, #48]	; (8000524 <SystemInit+0x58>)
 80004f2:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80004f4:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80004f6:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80004f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004fa:	4382      	bics	r2, r0
 80004fc:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 80004fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000500:	4809      	ldr	r0, [pc, #36]	; (8000528 <SystemInit+0x5c>)
 8000502:	4002      	ands	r2, r0
 8000504:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8000506:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000508:	438a      	bics	r2, r1
 800050a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]

}
 8000510:	4770      	bx	lr
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	40021000 	.word	0x40021000
 8000518:	08ffb80c 	.word	0x08ffb80c
 800051c:	fef6ffff 	.word	0xfef6ffff
 8000520:	fffbffff 	.word	0xfffbffff
 8000524:	ffc0ffff 	.word	0xffc0ffff
 8000528:	fffffeec 	.word	0xfffffeec

0800052c <Set_Freq>:
#define pwm_a(pulse)        TIM3->CCR1 = (pulse)
#define pwm_b(pulse)        TIM3->CCR2 = (pulse)

void Set_Freq(uint32_t freq)
{
    if (freq > 80000)
 800052c:	4b0f      	ldr	r3, [pc, #60]	; (800056c <Set_Freq+0x40>)
{
 800052e:	b570      	push	{r4, r5, r6, lr}
 8000530:	0004      	movs	r4, r0
 8000532:	4d0f      	ldr	r5, [pc, #60]	; (8000570 <Set_Freq+0x44>)
    if (freq > 80000)
 8000534:	4298      	cmp	r0, r3
 8000536:	d815      	bhi.n	8000564 <Set_Freq+0x38>
        freq = 80000;
    else if (freq < 1)
 8000538:	2800      	cmp	r0, #0
 800053a:	d006      	beq.n	800054a <Set_Freq+0x1e>
        freq = 1;
    if (freq < 20)
 800053c:	2813      	cmp	r0, #19
 800053e:	d905      	bls.n	800054c <Set_Freq+0x20>
        TIM3->PSC = 125 - 1;
    else if (freq < 1000)
 8000540:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <Set_Freq+0x48>)
 8000542:	4298      	cmp	r0, r3
 8000544:	d80f      	bhi.n	8000566 <Set_Freq+0x3a>
        TIM3->PSC = 8 - 1;
 8000546:	2307      	movs	r3, #7
 8000548:	e001      	b.n	800054e <Set_Freq+0x22>
        freq = 1;
 800054a:	2401      	movs	r4, #1
        TIM3->PSC = 125 - 1;
 800054c:	237c      	movs	r3, #124	; 0x7c
    else
        TIM3->PSC = 0;
 800054e:	62ab      	str	r3, [r5, #40]	; 0x28
    TIM3->ARR = 8000000 / (TIM3->PSC + 1) / freq;
 8000550:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8000552:	4809      	ldr	r0, [pc, #36]	; (8000578 <Set_Freq+0x4c>)
 8000554:	3101      	adds	r1, #1
 8000556:	f7ff fe45 	bl	80001e4 <__udivsi3>
 800055a:	0021      	movs	r1, r4
 800055c:	f7ff fe42 	bl	80001e4 <__udivsi3>
 8000560:	62e8      	str	r0, [r5, #44]	; 0x2c
}
 8000562:	bd70      	pop	{r4, r5, r6, pc}
        freq = 80000;
 8000564:	001c      	movs	r4, r3
        TIM3->PSC = 0;
 8000566:	2300      	movs	r3, #0
 8000568:	e7f1      	b.n	800054e <Set_Freq+0x22>
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	00013880 	.word	0x00013880
 8000570:	40000400 	.word	0x40000400
 8000574:	000003e7 	.word	0x000003e7
 8000578:	007a1200 	.word	0x007a1200

0800057c <Set_TB6612_Dir>:

void Set_TB6612_Dir(uint8_t motor, uint8_t dir, uint16_t pulse)
{
 800057c:	b530      	push	{r4, r5, lr}
 800057e:	0004      	movs	r4, r0
    switch (dir)
 8000580:	2904      	cmp	r1, #4
 8000582:	d821      	bhi.n	80005c8 <Set_TB6612_Dir+0x4c>
 8000584:	0008      	movs	r0, r1
 8000586:	2390      	movs	r3, #144	; 0x90
 8000588:	2504      	movs	r5, #4
 800058a:	05db      	lsls	r3, r3, #23
 800058c:	4921      	ldr	r1, [pc, #132]	; (8000614 <Set_TB6612_Dir+0x98>)
 800058e:	f7ff fe1f 	bl	80001d0 <__gnu_thumb1_case_uqi>
 8000592:	1303      	.short	0x1303
 8000594:	2f22      	.short	0x2f22
 8000596:	3c          	.byte	0x3c
 8000597:	00          	.byte	0x00
    {
        case DIR_BRAKE:
            pin_set(PIN_STBY);
 8000598:	619d      	str	r5, [r3, #24]
            if (motor == MOTOR_A)
 800059a:	2c00      	cmp	r4, #0
 800059c:	d105      	bne.n	80005aa <Set_TB6612_Dir+0x2e>
            {
                pin_set(PIN_AIN1);
 800059e:	2202      	movs	r2, #2
 80005a0:	619a      	str	r2, [r3, #24]
                pin_set(PIN_AIN2);
 80005a2:	3a01      	subs	r2, #1
 80005a4:	619a      	str	r2, [r3, #24]
            pin_set(PIN_STBY);
            if (motor == MOTOR_A)
            {
                pin_clear(PIN_AIN1);
                pin_clear(PIN_AIN2);
                pwm_a(0);
 80005a6:	634c      	str	r4, [r1, #52]	; 0x34
 80005a8:	e00e      	b.n	80005c8 <Set_TB6612_Dir+0x4c>
                pin_set(PIN_BIN1);
 80005aa:	2208      	movs	r2, #8
 80005ac:	619a      	str	r2, [r3, #24]
                pin_set(PIN_BIN2);
 80005ae:	3238      	adds	r2, #56	; 0x38
 80005b0:	619a      	str	r2, [r3, #24]
            }
            else
            {
                pin_clear(PIN_BIN1);
                pin_clear(PIN_BIN2);
                pwm_b(0);
 80005b2:	2300      	movs	r3, #0
        break;

        case DIR_STANDBY:
            pin_clear(PIN_STBY);
            pwm_a(0);
            pwm_b(0);
 80005b4:	638b      	str	r3, [r1, #56]	; 0x38
        break;
    }
}
 80005b6:	e007      	b.n	80005c8 <Set_TB6612_Dir+0x4c>
            pin_set(PIN_STBY);
 80005b8:	619d      	str	r5, [r3, #24]
            if (motor == MOTOR_A)
 80005ba:	2c00      	cmp	r4, #0
 80005bc:	d105      	bne.n	80005ca <Set_TB6612_Dir+0x4e>
                pin_clear(PIN_AIN1);
 80005be:	2002      	movs	r0, #2
 80005c0:	6298      	str	r0, [r3, #40]	; 0x28
                pin_set(PIN_AIN2);
 80005c2:	3801      	subs	r0, #1
 80005c4:	6198      	str	r0, [r3, #24]
                pwm_a(pulse);
 80005c6:	634a      	str	r2, [r1, #52]	; 0x34
}
 80005c8:	bd30      	pop	{r4, r5, pc}
                pin_clear(PIN_BIN1);
 80005ca:	2008      	movs	r0, #8
 80005cc:	6298      	str	r0, [r3, #40]	; 0x28
                pin_set(PIN_BIN2);
 80005ce:	3038      	adds	r0, #56	; 0x38
 80005d0:	6198      	str	r0, [r3, #24]
                pwm_b(pulse);
 80005d2:	638a      	str	r2, [r1, #56]	; 0x38
 80005d4:	e7f8      	b.n	80005c8 <Set_TB6612_Dir+0x4c>
            pin_set(PIN_STBY);
 80005d6:	619d      	str	r5, [r3, #24]
            if (motor == MOTOR_A)
 80005d8:	2c00      	cmp	r4, #0
 80005da:	d104      	bne.n	80005e6 <Set_TB6612_Dir+0x6a>
                pin_set(PIN_AIN1);
 80005dc:	2002      	movs	r0, #2
 80005de:	6198      	str	r0, [r3, #24]
                pin_clear(PIN_AIN2);
 80005e0:	3801      	subs	r0, #1
 80005e2:	6298      	str	r0, [r3, #40]	; 0x28
 80005e4:	e7ef      	b.n	80005c6 <Set_TB6612_Dir+0x4a>
                pin_set(PIN_BIN1);
 80005e6:	2008      	movs	r0, #8
 80005e8:	6198      	str	r0, [r3, #24]
                pin_clear(PIN_BIN2);
 80005ea:	3038      	adds	r0, #56	; 0x38
 80005ec:	6298      	str	r0, [r3, #40]	; 0x28
 80005ee:	e7f0      	b.n	80005d2 <Set_TB6612_Dir+0x56>
            pin_set(PIN_STBY);
 80005f0:	619d      	str	r5, [r3, #24]
            if (motor == MOTOR_A)
 80005f2:	2c00      	cmp	r4, #0
 80005f4:	d104      	bne.n	8000600 <Set_TB6612_Dir+0x84>
                pin_clear(PIN_AIN1);
 80005f6:	2202      	movs	r2, #2
 80005f8:	629a      	str	r2, [r3, #40]	; 0x28
                pin_clear(PIN_AIN2);
 80005fa:	3a01      	subs	r2, #1
 80005fc:	629a      	str	r2, [r3, #40]	; 0x28
 80005fe:	e7d2      	b.n	80005a6 <Set_TB6612_Dir+0x2a>
                pin_clear(PIN_BIN1);
 8000600:	2208      	movs	r2, #8
 8000602:	629a      	str	r2, [r3, #40]	; 0x28
                pin_clear(PIN_BIN2);
 8000604:	3238      	adds	r2, #56	; 0x38
 8000606:	629a      	str	r2, [r3, #40]	; 0x28
 8000608:	e7d3      	b.n	80005b2 <Set_TB6612_Dir+0x36>
            pin_clear(PIN_STBY);
 800060a:	629d      	str	r5, [r3, #40]	; 0x28
            pwm_a(0);
 800060c:	2300      	movs	r3, #0
 800060e:	634b      	str	r3, [r1, #52]	; 0x34
 8000610:	e7d0      	b.n	80005b4 <Set_TB6612_Dir+0x38>
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	40000400 	.word	0x40000400

08000618 <user_i2c_proc>:
0x10  set motorA  |  uint8 dir  uint16 pwm
0x11  set motorB  |  uint8 dir  uint16 pwm
*/

void user_i2c_proc(uint8_t i2c_data[4])
{
 8000618:	b510      	push	{r4, lr}
    uint8_t cmd = (i2c_data[0] >> 4);
 800061a:	7803      	ldrb	r3, [r0, #0]
{
 800061c:	0001      	movs	r1, r0

    switch(cmd)
 800061e:	0918      	lsrs	r0, r3, #4
 8000620:	d002      	beq.n	8000628 <user_i2c_proc+0x10>
 8000622:	2801      	cmp	r0, #1
 8000624:	d00f      	beq.n	8000646 <user_i2c_proc+0x2e>

            Set_TB6612_Dir(motor, dir, pulse);
            break;
        }
    }
}
 8000626:	bd10      	pop	{r4, pc}
                            (uint32_t)i2c_data[1] << 16 |
 8000628:	784a      	ldrb	r2, [r1, #1]
                            (uint32_t)i2c_data[2] << 8 |
 800062a:	7888      	ldrb	r0, [r1, #2]
                            (uint32_t)i2c_data[1] << 16 |
 800062c:	0412      	lsls	r2, r2, #16
                            (uint32_t)i2c_data[2] << 8 |
 800062e:	0200      	lsls	r0, r0, #8
            uint32_t freq = (uint32_t)(i2c_data[0] & 0x0f) << 24 |
 8000630:	4310      	orrs	r0, r2
                            (uint32_t)i2c_data[3];
 8000632:	78ca      	ldrb	r2, [r1, #3]
            uint32_t freq = (uint32_t)(i2c_data[0] & 0x0f) << 24 |
 8000634:	061b      	lsls	r3, r3, #24
 8000636:	4310      	orrs	r0, r2
 8000638:	22f0      	movs	r2, #240	; 0xf0
 800063a:	0512      	lsls	r2, r2, #20
 800063c:	4013      	ands	r3, r2
 800063e:	4318      	orrs	r0, r3
            Set_Freq(freq);
 8000640:	f7ff ff74 	bl	800052c <Set_Freq>
            break;
 8000644:	e7ef      	b.n	8000626 <user_i2c_proc+0xe>
            uint16_t pulse = (uint16_t)i2c_data[2] << 8 | (uint16_t)i2c_data[3];
 8000646:	788c      	ldrb	r4, [r1, #2]
 8000648:	78ca      	ldrb	r2, [r1, #3]
 800064a:	0224      	lsls	r4, r4, #8
            Set_TB6612_Dir(motor, dir, pulse);
 800064c:	4322      	orrs	r2, r4
 800064e:	7849      	ldrb	r1, [r1, #1]
 8000650:	4018      	ands	r0, r3
 8000652:	f7ff ff93 	bl	800057c <Set_TB6612_Dir>
}
 8000656:	e7e6      	b.n	8000626 <user_i2c_proc+0xe>

08000658 <__libc_init_array>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	2600      	movs	r6, #0
 800065c:	4d0c      	ldr	r5, [pc, #48]	; (8000690 <__libc_init_array+0x38>)
 800065e:	4c0d      	ldr	r4, [pc, #52]	; (8000694 <__libc_init_array+0x3c>)
 8000660:	1b64      	subs	r4, r4, r5
 8000662:	10a4      	asrs	r4, r4, #2
 8000664:	42a6      	cmp	r6, r4
 8000666:	d109      	bne.n	800067c <__libc_init_array+0x24>
 8000668:	2600      	movs	r6, #0
 800066a:	f000 f819 	bl	80006a0 <_init>
 800066e:	4d0a      	ldr	r5, [pc, #40]	; (8000698 <__libc_init_array+0x40>)
 8000670:	4c0a      	ldr	r4, [pc, #40]	; (800069c <__libc_init_array+0x44>)
 8000672:	1b64      	subs	r4, r4, r5
 8000674:	10a4      	asrs	r4, r4, #2
 8000676:	42a6      	cmp	r6, r4
 8000678:	d105      	bne.n	8000686 <__libc_init_array+0x2e>
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	00b3      	lsls	r3, r6, #2
 800067e:	58eb      	ldr	r3, [r5, r3]
 8000680:	4798      	blx	r3
 8000682:	3601      	adds	r6, #1
 8000684:	e7ee      	b.n	8000664 <__libc_init_array+0xc>
 8000686:	00b3      	lsls	r3, r6, #2
 8000688:	58eb      	ldr	r3, [r5, r3]
 800068a:	4798      	blx	r3
 800068c:	3601      	adds	r6, #1
 800068e:	e7f2      	b.n	8000676 <__libc_init_array+0x1e>
 8000690:	080006b8 	.word	0x080006b8
 8000694:	080006b8 	.word	0x080006b8
 8000698:	080006b8 	.word	0x080006b8
 800069c:	080006bc 	.word	0x080006bc

080006a0 <_init>:
 80006a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006a6:	bc08      	pop	{r3}
 80006a8:	469e      	mov	lr, r3
 80006aa:	4770      	bx	lr

080006ac <_fini>:
 80006ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006b2:	bc08      	pop	{r3}
 80006b4:	469e      	mov	lr, r3
 80006b6:	4770      	bx	lr
